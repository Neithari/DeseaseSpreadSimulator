cmake_minimum_required(VERSION 3.23)

# For debugging: Print variables with "cmake_print_variables(MY_VARIABLE)"
include(CMakePrintHelpers)

# Prevent building in the source directory
if(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
  message(FATAL_ERROR "In source builds are not allowed. Please make a build directory and run CMake from there.\n")
endif()

# Set the project name and language
project(
  DiseaseSpreadSimulator
  VERSION 0.0.1
  DESCRIPTION "Simulating the spread of a disease"
  LANGUAGES CXX)

# Any default can be overridden
# set(<feature_name>_DEFAULT <value>) - set default for both user and developer modes
# set(<feature_name>_DEVELOPER_DEFAULT <value>) - set default for developer mode
# set(<feature_name>_USER_DEFAULT <value>) - set default for user mode
set(ENABLE_CLANG_TIDY_DEFAULT OFF)
set(ENABLE_CPPCHECK OFF)

# Initialize project_options variable related to this project
# This overwrites `project_options` and sets `project_warnings`
# uncomment the options to enable them:
dynamic_project_options(
  # Note: PCH is disabled by default in developer mode because these headers become
  # globally included and they can mask other errors
  ENABLE_PCH
  PCH_HEADERS
  <fstream>
  <memory>
  <stdexcept>
  <random>
  <algorithm>
  <utility>
  <mutex>
  <shared_mutex>
  <execution>
  <optional>
  <iostream>
  <numeric>
  # Data structures
  <string>
  <vector>
  <array>
  # Not STD
  [["fmt/core.h"]]
  [["nlohmann/json.hpp"]]
  # Mine
  src/DiseaseSpreadSimulator/Enums.h
  src/DiseaseSpreadSimulator/RandomNumbers.h
  src/DiseaseSpreadSimulator/Statistics.h
  src/DiseaseSpreadSimulator/Disease/Disease.h
  src/DiseaseSpreadSimulator/Disease/Infection.h
  src/DiseaseSpreadSimulator/Person/Person.h
  src/DiseaseSpreadSimulator/Places/Places.h
  src/DiseaseSpreadSimulator/Places/Community.h
  src/DiseaseSpreadSimulator/Simulation/MeasureTime.h

  # ENABLE_CONAN
  # CONAN_OPTIONS    # Extra options to pass to conan
  # MSVC_WARNINGS    # Override the defaults for the MSVC warnings
  # CLANG_WARNINGS   # Override the defaults for the CLANG warnings
  # GCC_WARNINGS     # Override the defaults for the GCC warnings
  CPPCHECK_OPTIONS
  --enable=style,performance,warning,portability
  --inline-suppr
  # We cannot act on a bug/missing feature of cppcheck
  --suppress=cppcheckError
  --suppress=internalAstError
  # if a file does not have an internalAstError, we get an unmatchedSuppression error
  --suppress=unmatchedSuppression
  --suppress=passedByValue
  --suppress=syntaxError
  --inconclusive
)

target_compile_features(project_options INTERFACE cxx_std_${CMAKE_CXX_STANDARD})
# TODO: The INTERFACE library NAMESPACE ALIAS are missing! CK
add_library(${CMAKE_PROJECT_NAME}::project_options INTERFACE IMPORTED)
add_library(${CMAKE_PROJECT_NAME}::project_warnings INTERFACE IMPORTED)

# Adding the src:
add_subdirectory(src)

# Adding the tests:
option(ENABLE_TESTING "Enable the tests" ${PROJECT_IS_TOP_LEVEL})
if(ENABLE_TESTING)
  enable_testing()
  message(AUTHOR_WARNING "Building Tests. Be sure to check out tests/constexpr_tests.cpp for constexpr testing")
  add_subdirectory(tests)
endif()

option(ENABLE_FUZZING "Enable the fuzz tests" OFF)
if(ENABLE_FUZZING)
  message(AUTHOR_WARNING "Building Fuzz Tests, using fuzzing sanitizer https://www.llvm.org/docs/LibFuzzer.html")
  add_subdirectory(fuzz_test)
endif()

# If MSVC is being used, and ASAN is enabled, we need to set the debugger environment
# so that it behaves well with MSVC's debugger, and we can run the target from visual studio
if(MSVC)
  get_all_installable_targets(all_targets)
  message("all_targets=${all_targets}")
  set_target_properties(${all_targets} PROPERTIES VS_DEBUGGER_ENVIRONMENT "PATH=$(VC_ExecutablePath_x64);%PATH%")
endif()

# set the startup project for the "play" button in MSVC
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${CMAKE_PROJECT_NAME})

if(CMAKE_SKIP_INSTALL_RULES)
  return()
elseif(NOT PROJECT_IS_TOP_LEVEL)
  return()
endif()

# Add other targets that you want installed here, be default we just package the one executable
# we know we want to ship
package_project(TARGETS ${CMAKE_PROJECT_NAME} project_options project_warnings
  # FIXME: this does not work! CK
  # PRIVATE_DEPENDENCIES_CONFIGURED project_options project_warnings
)

# Experience shows that explicit package naming can help make it easier to sort
# out potential ABI related issues before they start, while helping you
# track a build to a specific GIT SHA
set(CPACK_PACKAGE_FILE_NAME
    "${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-${GIT_SHORT_SHA}-${CMAKE_SYSTEM_NAME}-${CMAKE_BUILD_TYPE}-${CMAKE_CXX_COMPILER_ID}-${CMAKE_CXX_COMPILER_VERSION}"
)

include(CPack)
